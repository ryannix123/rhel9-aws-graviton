- name: Deploy RHEL 9 Graviton instances on AWS with Podman, Load Balancer, and Red Hat Registration
  hosts: localhost
  gather_facts: false
  vars:
    aws_region: "us-east-2"
    instance_type: "t4g.small"
    ami_id: "ami-0b2ab21ce762d2a6f"  # RHEL 9 for ARM64/Graviton in us-east-2
    key_name: "my-keypair"
    security_group_name: "rhel9-sg"
    trusted_ssh_cidr: "203.0.113.0/24"  # Replace with your trusted IP range
    vpc_cidr: "10.0.0.0/16"
    ssh_public_key_path: "~/.ssh/my-public-key.pub"  # Replace with your actual public key path

    # Red Hat Subscription Manager (RHSM) Credentials
    rhsm_username: "your-rhsm-username"
    rhsm_password: "your-rhsm-password"
    rhsm_pool_id: "your-rhsm-pool-id"  # Get from 'subscription-manager list --available'

    # AWS Certificate Manager (ACM) for ALB SSL
    certificate_domain: "*.elb.amazonaws.com"  # AWS ALB default domain
    certificate_validation_method: "DNS"

    subnets:
      - az: "us-east-2a"
        cidr: "10.0.1.0/24"
      - az: "us-east-2b"
        cidr: "10.0.2.0/24"
      - az: "us-east-2c"
        cidr: "10.0.3.0/24"
    
    # Container Configuration
    container_registry: "myregistry.com"
    registry_username: "myuser"
    registry_password: "mypassword"
    container_image: "myregistry.com/my-app:latest"
    container_name: "my-app-container"
    container_ports: "8080:8080"
    container_env:
      - "ENV=production"
      - "DEBUG=false"

  tasks:
    - name: Read SSH public key
      ansible.builtin.slurp:
        src: "{{ ssh_public_key_path }}"
      register: ssh_pub_key

    # Skip ACM certificate creation due to IAM permissions
    - name: Set certificate ARN to empty value
      ansible.builtin.set_fact:
        skip_certificate: true

    - name: Create VPC using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws ec2 create-vpc
          --cidr-block {{ vpc_cidr }}
          --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=rhel9-vpc}]'
          --region {{ aws_region }}
      register: vpc_result
      changed_when: true

    - name: Extract VPC ID
      ansible.builtin.set_fact:
        vpc_id: "{{ vpc_result.stdout | from_json | json_query('Vpc.VpcId') }}"

    - name: Create Internet Gateway using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws ec2 create-internet-gateway
          --tag-specifications 'ResourceType=internet-gateway,Tags=[{Key=Name,Value=rhel9-igw}]'
          --region {{ aws_region }}
      register: igw_result
      changed_when: true

    - name: Extract Internet Gateway ID
      ansible.builtin.set_fact:
        igw_id: "{{ igw_result.stdout | from_json | json_query('InternetGateway.InternetGatewayId') }}"

    - name: Attach Internet Gateway to VPC
      ansible.builtin.command:
        cmd: >
          aws ec2 attach-internet-gateway
          --internet-gateway-id {{ igw_id }}
          --vpc-id {{ vpc_id }}
          --region {{ aws_region }}
      changed_when: true

    - name: Create Subnets using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws ec2 create-subnet
          --vpc-id {{ vpc_id }}
          --cidr-block {{ item.cidr }}
          --availability-zone {{ item.az }}
          --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=rhel9-subnet-{{ item.az }}}]'
          --region {{ aws_region }}
      loop: "{{ subnets }}"
      register: subnet_results
      changed_when: true

    - name: Extract Subnet IDs
      ansible.builtin.set_fact:
        subnet_ids: "{{ subnet_results.results | map(attribute='stdout') | map('from_json') | map(attribute='Subnet.SubnetId') | list }}"

    - name: Create Route Table using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws ec2 create-route-table
          --vpc-id {{ vpc_id }}
          --tag-specifications 'ResourceType=route-table,Tags=[{Key=Name,Value=rhel9-route-table}]'
          --region {{ aws_region }}
      register: route_table_result
      changed_when: true

    - name: Extract Route Table ID
      ansible.builtin.set_fact:
        route_table_id: "{{ route_table_result.stdout | from_json | json_query('RouteTable.RouteTableId') }}"

    - name: Create Default Route
      ansible.builtin.command:
        cmd: >
          aws ec2 create-route
          --route-table-id {{ route_table_id }}
          --destination-cidr-block 0.0.0.0/0
          --gateway-id {{ igw_id }}
          --region {{ aws_region }}
      changed_when: true

    - name: Associate Subnets with Route Table
      ansible.builtin.command:
        cmd: >
          aws ec2 associate-route-table
          --route-table-id {{ route_table_id }}
          --subnet-id {{ item }}
          --region {{ aws_region }}
      loop: "{{ subnet_ids }}"
      changed_when: true

    - name: Create Security Group using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws ec2 create-security-group
          --group-name {{ security_group_name }}
          --description "Allow SSH and HTTPS"
          --vpc-id {{ vpc_id }}
          --region {{ aws_region }}
      register: security_group_result
      changed_when: true

    - name: Extract Security Group ID
      ansible.builtin.set_fact:
        security_group_id: "{{ security_group_result.stdout | from_json | json_query('GroupId') }}"

    - name: Add SSH Ingress Rule
      ansible.builtin.command:
        cmd: >
          aws ec2 authorize-security-group-ingress
          --group-id {{ security_group_id }}
          --protocol tcp
          --port 22
          --cidr {{ trusted_ssh_cidr }}
          --region {{ aws_region }}
      changed_when: true

    - name: Add HTTPS Ingress Rule
      ansible.builtin.command:
        cmd: >
          aws ec2 authorize-security-group-ingress
          --group-id {{ security_group_id }}
          --protocol tcp
          --port 443
          --cidr 0.0.0.0/0
          --region {{ aws_region }}
      changed_when: true

    - name: Add Application Port Ingress Rule
      ansible.builtin.command:
        cmd: >
          aws ec2 authorize-security-group-ingress
          --group-id {{ security_group_id }}
          --protocol tcp
          --port 8080
          --cidr 0.0.0.0/0
          --region {{ aws_region }}
      changed_when: true

    - name: Launch RHEL 9 Instances using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws ec2 run-instances
          --image-id {{ ami_id }}
          --instance-type {{ instance_type }}
          --key-name {{ key_name }}
          --security-group-ids {{ security_group_id }}
          --subnet-id {{ item }}
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=rhel9-instance-{{ loop.index }}}]'
          --associate-public-ip-address
          --region {{ aws_region }}
          --count 1
      loop: "{{ subnet_ids }}"
      register: instance_results
      changed_when: true

    - name: Extract Instance IDs
      ansible.builtin.set_fact:
        instance_ids: "{{ instance_results.results | map(attribute='stdout') | map('from_json') | map(attribute='Instances[0].InstanceId') | list }}"

    - name: Wait for instances to be running
      ansible.builtin.command:
        cmd: >
          aws ec2 describe-instances
          --instance-ids {{ item }}
          --region {{ aws_region }}
      loop: "{{ instance_ids }}"
      register: instance_status_results
      until: instance_status_results.stdout | from_json | json_query('Reservations[0].Instances[0].State.Name') == 'running'
      retries: 10
      delay: 15
      changed_when: false

    - name: Get instance public IP addresses
      ansible.builtin.command:
        cmd: >
          aws ec2 describe-instances
          --instance-ids {{ item }}
          --query 'Reservations[0].Instances[0].PublicIpAddress'
          --output text
          --region {{ aws_region }}
      loop: "{{ instance_ids }}"
      register: instance_ip_results
      changed_when: false

    - name: Extract Public IP addresses
      ansible.builtin.set_fact:
        instance_ips: "{{ instance_ip_results.results | map(attribute='stdout') | list }}"

    - name: Wait for SSH to be available
      ansible.builtin.wait_for:
        host: "{{ item }}"
        port: 22
        delay: 10
        timeout: 320
      loop: "{{ instance_ips }}"

    - name: Upload SSH Public Key
      ansible.builtin.authorized_key:
        user: ec2-user
        key: "{{ ssh_pub_key['content'] | b64decode }}"
        state: present
      become: true
      delegate_to: "{{ item }}"
      loop: "{{ instance_ips }}"

    - name: Register RHEL with Red Hat Subscription Manager
      ansible.builtin.shell: |
        subscription-manager register --username={{ rhsm_username }} --password={{ rhsm_password }} --auto-attach || true
        subscription-manager attach --pool={{ rhsm_pool_id }} || true
        subscription-manager refresh
        subscription-manager repos --enable=rhel-9-for-arm-64-baseos-rpms
      become: true
      delegate_to: "{{ item }}"
      loop: "{{ instance_ips }}"

    - name: Install Podman
      ansible.builtin.yum:
        name: podman
        state: present
      become: true
      delegate_to: "{{ item }}"
      loop: "{{ instance_ips }}"

    - name: Log in to Container Registry
      ansible.builtin.shell: >
        podman login -u {{ registry_username }} -p {{ registry_password }} {{ container_registry }}
      become: true
      delegate_to: "{{ item }}"
      loop: "{{ instance_ips }}"

    - name: Run Container
      ansible.builtin.shell: >
        podman run -d --name {{ container_name }}
        -p {{ container_ports }}
        {% for env_var in container_env %}
        -e {{ env_var }}
        {% endfor %}
        {{ container_image }}
      become: true
      delegate_to: "{{ item }}"
      loop: "{{ instance_ips }}"

    - name: Create Target Group using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws elbv2 create-target-group
          --name rhel9-target-group
          --protocol HTTP
          --port 8080
          --vpc-id {{ vpc_id }}
          --health-check-path /
          --target-type instance
          --region {{ aws_region }}
      register: target_group_result
      changed_when: true

    - name: Extract Target Group ARN
      ansible.builtin.set_fact:
        target_group_arn: "{{ target_group_result.stdout | from_json | json_query('TargetGroups[0].TargetGroupArn') }}"

    - name: Register Instances with Target Group
      ansible.builtin.command:
        cmd: >
          aws elbv2 register-targets
          --target-group-arn {{ target_group_arn }}
          --targets Id={{ item }}
          --region {{ aws_region }}
      loop: "{{ instance_ids }}"
      changed_when: true

    - name: Create Load Balancer using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws elbv2 create-load-balancer
          --name rhel9-load-balancer
          --subnets {{ subnet_ids | join(' ') }}
          --security-groups {{ security_group_id }}
          --scheme internet-facing
          --ip-address-type ipv4
          --region {{ aws_region }}
      register: alb_result
      changed_when: true

    - name: Extract Load Balancer ARN
      ansible.builtin.set_fact:
        alb_arn: "{{ alb_result.stdout | from_json | json_query('LoadBalancers[0].LoadBalancerArn') }}"
        alb_dns_name: "{{ alb_result.stdout | from_json | json_query('LoadBalancers[0].DNSName') }}"

    # Create HTTP Listener instead of HTTPS due to missing certificate permissions
    - name: Create HTTP Listener using AWS CLI
      ansible.builtin.command:
        cmd: >
          aws elbv2 create-listener
          --load-balancer-arn {{ alb_arn }}
          --protocol HTTP
          --port 80
          --default-actions Type=forward,TargetGroupArn={{ target_group_arn }}
          --region {{ aws_region }}
      changed_when: true

    - name: Output Load Balancer URL
      ansible.builtin.debug:
        msg: "Access your application at http://{{ alb_dns_name }}"